#setA Q2
# Time Series Forecasting with LSTM on Monthly Milk Production

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import math

from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, r2_score

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# -------------------------------
# Step 1: Load Dataset
# -------------------------------
df = pd.read_csv("/content/monthly-milk-production-pounds.csv", skiprows=1, names=["Month", "MilkProduction"])
df.dropna(inplace=True)

try:
    df["Month"] = pd.to_datetime(df["Month"], format="%Y-%m")
except:
    df["Month"] = pd.to_datetime(df["Month"], errors='coerce')

df.dropna(inplace=True)
df.set_index("Month", inplace=True)
print("Dataset shape:", df.shape)
print(df.head())

# -------------------------------
# Step 2: Normalize
# -------------------------------
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(df[["MilkProduction"]])

# -------------------------------
# Step 3: Create sequences (input=3)
# -------------------------------
def create_sequences(data, seq_length):
    X, y = [], []
    for i in range(len(data) - seq_length):
        X.append(data[i:(i + seq_length), 0])
        y.append(data[i + seq_length, 0])
    return np.array(X), np.array(y)

seq_length = 3
X, y = create_sequences(scaled_data, seq_length)
X = X.reshape((X.shape[0], X.shape[1], 1))  # features=1

# Split train/test
split = int(len(X) * 0.8)
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]

# -------------------------------
# Step 4: Build LSTM model
# -------------------------------
model = Sequential([
    LSTM(50, return_sequences=True, input_shape=(seq_length, 1)),
    LSTM(50),
    Dense(1)
])

model.compile(optimizer='adam', loss='mean_squared_error')

# -------------------------------
# Step 5: Train model
# -------------------------------
history = model.fit(X_train, y_train, epochs=20, batch_size=1,
                    validation_data=(X_test, y_test), verbose=1)

# -------------------------------
# Step 6: Predict test set
# -------------------------------
y_pred = model.predict(X_test)

y_test_inv = scaler.inverse_transform(y_test.reshape(-1,1))
y_pred_inv = scaler.inverse_transform(y_pred)

y_true = y_test_inv.flatten()
y_pred_final = y_pred_inv.flatten()

mask = ~np.isnan(y_true) & ~np.isnan(y_pred_final)
y_true = y_true[mask]
y_pred_final = y_pred_final[mask]

# Metrics
rmse = math.sqrt(mean_squared_error(y_true, y_pred_final))
r2 = r2_score(y_true, y_pred_final)
accuracy = 100 * (1 - rmse / np.mean(y_true))

print(f"\nRoot Mean Squared Error (RMSE): {rmse:.4f}")
print(f"RÂ² Score: {r2:.4f}")
print(f"Accuracy: {accuracy:.2f}%")

# -------------------------------
# Step 7: Plot Actual vs Predicted (Test Set)
# -------------------------------
plt.figure(figsize=(12,6))
plt.plot(y_true, label="Actual")
plt.plot(y_pred_final, label="Predicted")
plt.title("Milk Production Forecasting (LSTM) - Test Set")
plt.xlabel("Months (Test Period)")
plt.ylabel("Milk Production")
plt.legend()
plt.show()

# -------------------------------
# Step 8: Predict Next 12 Months
# -------------------------------
last_seq = scaled_data[-seq_length:].reshape(1, seq_length, 1)  # last 3 months
future_preds = []

for i in range(12):  # next 12 months
    next_pred = model.predict(last_seq)[0,0]
    future_preds.append(next_pred)

    # update last_seq to include new prediction
    last_seq = np.append(last_seq[:,1:,:], [[[next_pred]]], axis=1)

future_preds_inv = scaler.inverse_transform(np.array(future_preds).reshape(-1,1))

# Print 12-month forecast
print("\nNext 12 Months Forecasted Milk Production:")
for i, val in enumerate(future_preds_inv, 1):
    print(f"Month +{i}: {val[0]:.2f}")

# -------------------------------
# Step 9: Plot 12-month Forecast with Historical Data
# -------------------------------
plt.figure(figsize=(12,6))
plt.plot(df.index, df["MilkProduction"], label="Historical Data")
future_index = pd.date_range(start=df.index[-1] + pd.offsets.MonthBegin(1), periods=12, freq='MS')
plt.plot(future_index, future_preds_inv, label="12-Month Forecast", marker='o', linestyle='--')
plt.title("Milk Production Forecast (Next 12 Months)")
plt.xlabel("Month")
plt.ylabel("Milk Production")
plt.legend()
plt.show()





