import tensorflow as tf
from tensorflow.keras import datasets, layers, models
from tensorflow.keras.layers import LeakyReLU
import matplotlib.pyplot as plt
import numpy as np


(x_train, y_train), (x_test, y_test) = datasets.fashion_mnist.load_data()

class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

print(f"Training data shape: {x_train.shape}")
print(f"Testing data shape: {x_test.shape}")
print(f"Number of classes: {len(np.unique(y_train))}")


plt.figure(figsize=(12, 6))
for i in range(10):
    # Find first image of class i
    idx = np.where(y_train == i)[0][0]
    plt.subplot(2, 5, i + 1)
    plt.imshow(x_train[idx], cmap='magma')
    plt.title(class_names[i])
    plt.axis('off')
plt.suptitle("Sample Images from Each Class")
plt.show()

x_train = x_train / 255.0
x_test = x_test / 255.0

# Reshape to (28, 28, 1)
x_train = x_train.reshape(-1, 28, 28, 1)
x_test = x_test.reshape(-1, 28, 28, 1)

# ------------------------------
# 3. Build CNN Model with LeakyReLU
# ------------------------------
model = models.Sequential([
    layers.Conv2D(32, (3, 3), input_shape=(28, 28, 1)),
    LeakyReLU(alpha=0.1),
    layers.MaxPooling2D((2, 2)),

    layers.Conv2D(64, (3, 3)),
    LeakyReLU(alpha=0.1),
    layers.MaxPooling2D((2, 2)),

    layers.Conv2D(64, (3, 3)),
    LeakyReLU(alpha=0.1),

    layers.Flatten(),
    layers.Dense(64),
    LeakyReLU(alpha=0.1),
    layers.Dense(10, activation='softmax')
])

# Compile
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Model summary
model.summary()


history = model.fit(x_train, y_train, epochs=10,
                    validation_data=(x_test, y_test),
                    batch_size=64)


test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)
print(f"\nâœ… Test Accuracy: {test_acc * 100:.2f}%")

# ------------------------------
# 6. Plot Training & Validation Accuracy and Loss
# ------------------------------
plt.figure(figsize=(12, 5))

# Accuracy plot
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title("Training and Validation Accuracy")
plt.xlabel("Epoch")
plt.ylabel("Accuracy")
plt.legend()

# Loss plot
plt.subplot(1, 2, 2)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title("Training and Validation Loss")
plt.xlabel("Epoch")
plt.ylabel("Loss")
plt.legend()

plt.show()
